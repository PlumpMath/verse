/*
 * $Id: v_taggroup_create.c 933 2011-08-25 20:22:43Z jiri $
 *
 * ***** BEGIN BSD LICENSE BLOCK *****
 *
 * Copyright (c) 2009-2011, Jiri Hnidek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END BSD LICENSE BLOCK *****
 *
 * Authors: Jiri Hnidek <jiri.hnidek@tul.cz>
 *
 */

#include <string.h>
#include <assert.h>

#include "v_taggroup_commands.h"

#include "v_in_queue.h"
#include "v_common.h"
#include "v_network.h"
#include "v_unpack.h"
#include "v_pack.h"
#include "v_cmd_queue.h"

/**
 * \brief This function print content of TagGroup command
 */
void v_taggroup_create_print(const unsigned char level,
		struct TagGroup_Create_Cmd *tag_group_create_cmd)
{
	v_print_log_simple(level, "\tTAGGROUP_CREATE, NodeID: %d, TagGroupID: %d, Name: %s\n",
			tag_group_create_cmd->addr.node_id, tag_group_create_cmd->taggroup_id, tag_group_create_cmd->name);
}


/* Don't allow to do compression now, because it's complicated or commands
 * with variable length */
#if 0
/**
 * \brief This function compares addresses of two TagGroup_Create commands and
 * it returns size of address that could be shared
 *
 * \param[in]	*cmd1			The command that already is in queue
 * \param[in]	*cmd1			The command that is added to the queue
 * \param[in]	current_size	The current size of shared address
 */
uint8 v_taggroup_cmds_cmp(struct TagGroup_Create_Cmd *cmd1,
		struct TagGroup_Create_Cmd *cmd2,
		const uint8 current_size)
{
	int same = 0;

	if(current_size > 0 && cmd1->addr.node_id == cmd2->addr.node_id) {
		same += 4;
	}

	return same;
}
#endif

/**
 * \brief This function compute length of compressed TagGroup_Create commands.
 *
 * \param[in]	count	The number of commands that could be compressed to one command
 * \param[in]	hare	The size of address that is shared
 *
 * \return This function returns the size of compressed command including several commands
 */
int16 v_taggroup_create_cmds_len(struct TagGroup_Create_Cmd *taggroup_create_cmd,
		uint16 len)
{
	int16 ret;
	uint16 data_len = 0;

	/* NodeID + TagGroupID + String8 Length + String */
	data_len = 4 + 2 + 1 + strlen(taggroup_create_cmd->name);

	if(len == 0) {
		/* OpCode + Length(1B) + Size of sharing + data */
		ret = 1 + 1 + 1 + data_len;
	} else {
		if( (len < 0xFF) && ((len + data_len) >= 0xFF) ) {
			/* When adding new command increase length of the command behind 255,
			 * then length will be coded with: 0xFF(1B), Length(2B) */
			ret = len + 2 + data_len;
		} else {
			ret = len + data_len;
		}
	}

	return ret;
}

/**
 * \brief This function returns size of command that is alone
 */
int16 v_taggroup_create_len(struct TagGroup_Create_Cmd *taggroup_create_cmd)
{
	int string8_len = strlen(taggroup_create_cmd->name);

	if((1 + 1 + 1 + 4 + 2 + 1 + string8_len) < 0xFF) {
		/* OpCode + Length(1B) + Size of sharing + NodeID + TagGroupID + String8 Length + String */
		return  1 + 1 + 1 + 4 + 2 + 1 + string8_len;
	} else {
		/* OpCode + 0xFF(1B) + Length(2B) + Size of sharing + NodeID + TagGroupID + String8 Length + String */
		return 1 + 1 + 2 + 1 + 4 + 2 + 1 + string8_len;
	}
}

int v_taggroup_create_unpack(const char *buffer,
		const ssize_t buffer_size,
		struct VInQueue *queue)
{
	struct TagGroup_Create_Cmd *taggroup_create;
	uint16 buffer_pos = 0;
	uint8 cmd_id;
	uint8 str8_len, str_len;
	uint8 share, cmd_addr_len;
	uint32 node_id;
	uint16 taggroup_id, length;
	char taggroup_name[VRS_STRING8_MAX_SIZE+1];
	int i = 0 , share_node_id;

	/* Is the remaining size of buffer big enough for TagGroup command */
	if(buffer_size < TAGGROUP_CREATE_CMD_LEN) {
		v_print_log(VRS_PRINT_WARNING, "Buffer size: %d < minimal TagGroup_Create command length: %d, dropping rest of packet.\n",
				buffer_size, TAGGROUP_CREATE_CMD_LEN);
		return buffer_size;
	}

	/* Unpack ID */
	buffer_pos += vnp_raw_unpack_uint8(&buffer[buffer_pos], &cmd_id);

	/* Unpack Length of the command */
	buffer_pos += v_cmd_unpack_len(&buffer[buffer_pos], &length, &cmd_addr_len);

	/* Isn't length of the command too big? */
	if(length > buffer_size) {
		v_print_log(VRS_PRINT_WARNING, "TagGroup_Create command length: %d > buffer size: %d, cropping command\n", length, buffer_size);
		length = buffer_size;
	}

	/* Unpack size of address that is shared (UserID, ParentID) */
	buffer_pos += vnp_raw_unpack_uint8(&buffer[buffer_pos], &share);

	/* Update skip according type of sharing command address */
	switch(share) {
	case 0:
		share_node_id = 0;
		break;
	case 4:
		share_node_id = 1;
		break;
	default:
		v_print_log(VRS_PRINT_WARNING, "Bad share: %d != [0,4] of TagGroup_Create command, using default 0.\n", share);
		break;
	}

	/* Unpack Node ID */
	if(share_node_id == 1) {
		buffer_pos += vnp_raw_unpack_uint32(&buffer[buffer_pos], &node_id);
	}

	while(buffer_pos<length) {
		/* Unpack Node ID */
		if(share_node_id == 0) {
			buffer_pos += vnp_raw_unpack_uint32(&buffer[buffer_pos], &node_id);
		}

		/* Unpack TagGroup ID */
		buffer_pos += vnp_raw_unpack_uint16(&buffer[buffer_pos], &taggroup_id);

		/* Unpack the length of the name */
		buffer_pos += vnp_raw_unpack_uint8(&buffer[buffer_pos], &str8_len);

		/* Crop length of the string */
		if((buffer_pos+str8_len) <= length) {
			str_len = str8_len;
		} else {
			v_print_log(VRS_PRINT_WARNING, "Buffer_pos: %d + TagGroup_Create name length: %d > command length: %d, cropping name\n",
					buffer_pos, str8_len, length);
			str_len = length - buffer_pos;
		}

		/* Unpack name of the TagGroup */
		for(i=0; i<str_len && buffer_pos < length; i++) {
			buffer_pos += vnp_raw_unpack_uint8(&buffer[buffer_pos], (uint8*)&taggroup_name[i]);
		}
		taggroup_name[i] = '\0';

		/* Create new TagGroup command */
		taggroup_create = v_taggroup_create_create(node_id, taggroup_id, taggroup_name);

		/* Push it to the queue of incoming commands */
		v_in_queue_push(queue, (struct Generic_Cmd*)taggroup_create);

		/* Print content of received command */
		if(is_log_level(VRS_PRINT_DEBUG_MSG)) {
			printf("%c[%d;%dm", 27, 1, 34);
			v_taggroup_create_print(VRS_PRINT_DEBUG_MSG, taggroup_create);
			printf("%c[%dm", 27, 0);
		}
	}

	/* Buffer_pos has to be equal to command length. */
	assert(buffer_pos == length);

	return buffer_pos;
}

/**
 * brief This function pack data of the TagGroup_Create command (not header
 * and address)
 */
static int v_taggroup_create_pack_data(char *buffer,
		const struct TagGroup_Create_Cmd *tag_group_create_cmd)
{
	uint16 buffer_pos = 0;
	size_t str_len;
	uint8 i, str8_len;

	/* Pack TagGroup ID */
	buffer_pos += vnp_raw_pack_uint16(&buffer[buffer_pos], tag_group_create_cmd->taggroup_id);

	str_len = strlen(tag_group_create_cmd->name);
	/* Crop the name, when it is necessary */
	str8_len = (str_len < VRS_STRING8_MAX_SIZE) ? str_len : VRS_STRING8_MAX_SIZE;

	/* Pack the length of the name of TagGroup */
	buffer_pos += vnp_raw_pack_uint8(&buffer[buffer_pos], str8_len);

	/* Pack the name */
	for(i=0; i<str8_len; i++) {
		buffer_pos += vnp_raw_pack_uint8(&buffer[buffer_pos], tag_group_create_cmd->name[i]);
	}

	return buffer_pos;
}

/**
 * This function pack command to the buffer
 */
int v_taggroup_create_pack(char *buffer,
		const struct TagGroup_Create_Cmd *tag_group_create_cmd,
		const uint16 length,
		const uint8 share)
{
	uint16 buffer_pos = 0;

	if(length != 0) {
		/* Pack Command ID */
		buffer_pos += vnp_raw_pack_uint8(&buffer[buffer_pos], CMD_TAGGROUP_CREATE);
		/* Pack length of the command */
		buffer_pos += v_cmd_pack_len(&buffer[buffer_pos], length);
		/* Pack size (in bytes) of address that will be shared */
		buffer_pos += vnp_raw_pack_uint8(&buffer[buffer_pos], share);
		/* Pack Node ID */
		buffer_pos += vnp_raw_pack_uint32(&buffer[buffer_pos], tag_group_create_cmd->addr.node_id);
		/* Pack data of the command */
		buffer_pos += v_taggroup_create_pack_data(&buffer[buffer_pos], tag_group_create_cmd);
	} else {
		/* All items of addresses are unique */
		if(share == 0) {
			/* Pack Node ID */
			buffer_pos += vnp_raw_pack_uint32(&buffer[buffer_pos], tag_group_create_cmd->addr.node_id);
			/* Pack data of the command */
			buffer_pos += v_taggroup_create_pack_data(&buffer[buffer_pos], tag_group_create_cmd);
		/* When share is 4, then Node_ID is shared, other items are unique */
		} else if(share == 4) {
			/* Pack data of the command */
			buffer_pos += v_taggroup_create_pack_data(&buffer[buffer_pos], tag_group_create_cmd);
		} else {
			v_print_log(VRS_PRINT_ERROR, "TagGroup_Create doesn't support this share: %d\n", share);
		}
	}

	return buffer_pos;
}

/**
 * \brief This function initialize command queue with TagGroup_Create commands
 */
struct VCommandQueue *v_taggroup_create_cmd_queue(uint16 flag)
{
	struct VCommandQueue *cmd_queue = NULL;
	struct TagGroup_Create_Cmd taggroup_create_cmd;

	cmd_queue = (struct VCommandQueue*)calloc(1, sizeof(struct VCommandQueue));
	cmd_queue->item_size = sizeof(struct TagGroup_Create_Cmd);
	cmd_queue->flag = 0;
	v_hash_array_init(&cmd_queue->cmds,
			HASH_MOD_256 | flag,
			(char*)&(taggroup_create_cmd.addr) - (char*)&(taggroup_create_cmd),
			sizeof(struct TagGroup_Create_Addr));

	return cmd_queue;
}

static void _v_taggroup_create_init(struct Generic_Cmd *taggroup_create,
		const uint32 node_id,
		const uint16 taggroup_id,
		char *name)
{
	if(taggroup_create != NULL) {
		uint32 string8_len = 0;

		if(name != NULL) {
			string8_len = strlen(name);
			/* The length of the name can't be longer then 256 bytes. Crop it, when it
			 * is necessary */
			if(string8_len > VRS_STRING8_MAX_SIZE) {
				v_print_log(VRS_PRINT_WARNING, "Cropping string8 %s(length:%d) to length: %d\n",
						name, strlen(name), VRS_STRING8_MAX_SIZE);
				string8_len = VRS_STRING8_MAX_SIZE;
			}
		}

		taggroup_create->id = CMD_TAGGROUP_CREATE;
		UINT32(taggroup_create->data[0]) = node_id;
		UINT16(taggroup_create->data[UINT32_SIZE]) = taggroup_id;
		PTR(taggroup_create->data[UINT32_SIZE + UINT16_SIZE]) = (name != NULL) ? strndup(name, string8_len) : NULL;
	}
}

/**
 * \brief This function initialize values of structure
 */
void v_taggroup_create_init(struct TagGroup_Create_Cmd *taggroup_create,
		const uint32 node_id,
		const uint16 taggroup_id,
		char *name)
{
	if(taggroup_create != NULL) {
		uint32 string8_len = 0;

		if(name != NULL) {
			string8_len = strlen(name);
			/* The length of the name can't be longer then 256 bytes. Crop it, when it
			 * is necessary */
			if(string8_len > VRS_STRING8_MAX_SIZE) {
				v_print_log(VRS_PRINT_WARNING, "Cropping string8 %s(length:%d) to length: %d\n",
						name, strlen(name), VRS_STRING8_MAX_SIZE);
				string8_len = VRS_STRING8_MAX_SIZE;
			}
		}

		taggroup_create->id = CMD_TAGGROUP_CREATE;
		taggroup_create->addr.node_id = node_id;
		taggroup_create->taggroup_id = taggroup_id;
		taggroup_create->name = (name != NULL) ? strndup(name, string8_len) : NULL;
	}
}

extern struct Cmd_Struct cmd_struct[];

struct Generic_Cmd *_v_taggroup_create_create(const uint32 node_id,
		const uint16 taggroup_id,
		char *name)
{
	struct Generic_Cmd *taggroup_create = NULL;
	taggroup_create = (struct Generic_Cmd *)malloc(sizeof(cmd_struct[CMD_TAGGROUP_CREATE].size));
	_v_taggroup_create_init(taggroup_create, node_id, taggroup_id, name);
	return taggroup_create;
}

/**
 * \brief This function is like constructor of object. It allocate new memory
 * for this structure and set up values of structure.
 */
struct TagGroup_Create_Cmd *v_taggroup_create_create(const uint32 node_id,
		const uint16 taggroup_id,
		char *name)
{
	struct TagGroup_Create_Cmd *taggroup_create = NULL;
	taggroup_create = (struct TagGroup_Create_Cmd *)calloc(1, sizeof(struct TagGroup_Create_Cmd));
	v_taggroup_create_init(taggroup_create, node_id, taggroup_id, name);
	return taggroup_create;
}

/**
 * \brief This function clear allocated memory for this structure
 */
void v_taggroup_create_clear(struct TagGroup_Create_Cmd *taggroup_create)
{
	if(taggroup_create != NULL) {
		taggroup_create->addr.node_id = -1;
		taggroup_create->taggroup_id = -1;
		if(taggroup_create->name != NULL) {
			free(taggroup_create->name);
		}
		taggroup_create->name = NULL;
	}
}

/**
 * \brief This function destroy structure TagGroup_Create
 */
void v_taggroup_create_destroy(struct TagGroup_Create_Cmd **taggroup_create)
{
	if(*taggroup_create != NULL) {
		v_taggroup_create_clear(*taggroup_create);
		free(*taggroup_create);
		*taggroup_create = NULL;
	}
}
